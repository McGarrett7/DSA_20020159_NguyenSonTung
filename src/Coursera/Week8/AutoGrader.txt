See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  FAILED (0 errors, 1 warning)
API:          PASSED

SpotBugs:     PASSED
PMD:          FAILED (9 warnings)
Checkstyle:   FAILED (0 errors, 1 warning)

Correctness:  38/51 tests passed
Memory:       22/22 tests passed
Timing:       125/125 tests passed

Aggregate score: 79.71%
[ Compilation: 5%, API: 5%, Style: 0%, Correctness: 60%, Timing: 10%, Memory: 20% ]


ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
4.3K Nov 19 14:41 Board.java
3.7K Nov 19 14:41 Solver.java


********************************************************************************
*  COMPILING                                                                    
********************************************************************************


% javac Board.java
*-----------------------------------------------------------

% javac Solver.java
*-----------------------------------------------------------
Solver.java:11: warning: [rawtypes] found raw type: Comparable
    private class Node implements Comparable {
                                  ^
  missing type arguments for generic class Comparable<T>
  where T is a type-variable:
    T extends Object declared in interface Comparable
1 warning


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
Board:

Solver:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       
********************************************************************************


% spotbugs *.class
*-----------------------------------------------------------


================================================================


% pmd .
*-----------------------------------------------------------
Board.java:5: The private instance (or static) variable 'size' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Board.java:6: The private instance (or static) variable 'blocks' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Solver.java:7: Can you replace the instance (or static) variable 'Board' with a local variable? [SingularField]
Solver.java:8: The private instance (or static) variable 'searchNode' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Solver.java:9: The private instance (or static) variable 'isSolvable' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Solver.java:12: The private instance (or static) variable 'board' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Solver.java:13: The private instance (or static) variable 'parent' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Solver.java:15: The private instance (or static) variable 'priority' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Solver.java:16: The private instance (or static) variable 'manhattan' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
PMD ends with 9 warnings.


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] Solver.java:7:25: The instance variable 'Board' must start with a lowercase letter and use camelCase. [MemberName]
Checkstyle ends with 0 errors and 1 warning.

% custom checkstyle checks for Board.java
*-----------------------------------------------------------

% custom checkstyle checks for Solver.java
*-----------------------------------------------------------


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of Board
*-----------------------------------------------------------
Running 26 total tests.

Tests 4-7 and 14-17 rely upon toString() returning results in prescribed format.

Test 1a: check hamming() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle07.txt
  * puzzle17.txt
  * puzzle27.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 1b: check hamming() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
  * 127-by-127
==> passed

Test 2a: check manhattan() with file inputs
  * puzzle04.txt
    - student   manhattan() = 53
    - reference manhattan() = 4
    - board
        3
         0  1  3 
         4  2  5 
         7  8  6 

  * puzzle00.txt
    - student   manhattan() = 5730
    - reference manhattan() = 0
    - board
        10
         1  2  3  4  5  6  7  8  9 10 
        11 12 13 14 15 16 17 18 19 20 
        21 22 23 24 25 26 27 28 29 30 
        31 32 33 34 35 36 37 38 39 40 
        41 42 43 44 45 46 47 48 49 50 
        51 52 53 54 55 56 57 58 59 60 
        61 62 63 64 65 66 67 68 69 70 
        71 72 73 74 75 76 77 78 79 80 
        81 82 83 84 85 86 87 88 89 90 
        91 92 93 94 95 96 97 98 99  0 

  * puzzle07.txt
    - student   manhattan() = 50
    - reference manhattan() = 7
    - board
        3
         1  2  3 
         0  7  6 
         5  4  8 

  * puzzle17.txt
    - student   manhattan() = 52
    - reference manhattan() = 13
    - board
        3
         5  1  8 
         2  7  3 
         4  0  6 

  * puzzle27.txt
    - student   manhattan() = 50
    - reference manhattan() = 17
    - board
        3
         5  8  7 
         1  4  6 
         3  0  2 

  * puzzle2x2-unsolvable1.txt
    - student   manhattan() = 7
    - reference manhattan() = 3
    - board
        2
         1  0 
         2  3 

==> FAILED

Test 2b: check manhattan() with random n-by-n boards
  * 2-by-2
    - student   manhattan() = 7
    - reference manhattan() = 3
    - board
        2
         1  0 
         2  3 

    - failed on trial 1 of 1000

  * 3-by-3
    - student   manhattan() = 54
    - reference manhattan() = 13
    - board
        3
         6  3  2 
         4  8  1 
         5  0  7 

    - failed on trial 1 of 1000

  * 4-by-4
    - student   manhattan() = 161
    - reference manhattan() = 29
    - board
        4
         1  9 12  2 
         0 11  4  5 
         7  6  3 10 
        14 13  8 15 

    - failed on trial 1 of 1000

  * 5-by-5
    - student   manhattan() = 386
    - reference manhattan() = 74
    - board
        5
         0  7 13 16 12 
        17 21  3  9  6 
        15 11 18 22  8 
         1 14 10 23  2 
        24  4 20 19  5 

    - failed on trial 1 of 1000

  * 9-by-9
    - student   manhattan() = 3787
    - reference manhattan() = 439
    - board
        9
        49 73 12 16  1  4 32 52 29 
        59 30 45 20 41  8 57  9 66 
         7 55 21 15 63  5 22 56 27 
        71 53 65 54 26 70  0 42 50 
        14 40 68 25 47 36 64 28 61 
        75 31  2 77  3 60 46  6 78 
        34 35 67 24 44 39 79 76 17 
        37 11 72 43 58 13 80 51 38 
        23 74 19 10 33 18 69 48 62 

    - failed on trial 1 of 1000

  * 10-by-10
    - student   manhattan() = 5708
    - reference manhattan() = 650
    - board
        10
        38 43 10 73 61 99 62 30 28 71 
         9 21  3 37 70 66 67 35 83 17 
        81 59 96 92  8 86  6 18 22 56 
        53 33 42 26 12  2 52 24 75 63 
         0 19 45 60 76 80 54 87 39 65 
        95 82 13 90 57 79 89 31 84 77 
        49 51 20 55 27  4 69 34 36 41 
        46 93 23 15 44 88 50 91  1  7 
        16 64 98 32 78 85 25 97 11 74 
        14 29 94 40 68 58  5 48 47 72 

    - failed on trial 1 of 1000

  * 127-by-127
    - student   manhattan() = 131762334
    - reference manhattan() = 1363069

    - failed on trial 1 of 10

==> FAILED

Test 3: check dimension() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 6-by-6
==> passed

Test 4a: check toString() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 4b: check toString() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
  * 127-by-127
==> passed

Test 5a: check neighbors() with file inputs
  * puzzle04.txt

    java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 3

    Board.swap(Board.java:143)
    Board.neighbors(Board.java:111)
    TestBoard.checkNeighbors(TestBoard.java:547)
    TestBoard.checkNeighbors(TestBoard.java:521)
    TestBoard.test5a(TestBoard.java:1450)
    TestBoard.main(TestBoard.java:1721)

  * puzzle00.txt
  * puzzle06.txt

    java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 4

    Board.swap(Board.java:143)
    Board.neighbors(Board.java:111)
    TestBoard.checkNeighbors(TestBoard.java:547)
    TestBoard.checkNeighbors(TestBoard.java:521)
    TestBoard.test5a(TestBoard.java:1452)
    TestBoard.main(TestBoard.java:1721)

  * puzzle09.txt

    java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 4

    Board.swap(Board.java:143)
    Board.neighbors(Board.java:111)
    TestBoard.checkNeighbors(TestBoard.java:547)
    TestBoard.checkNeighbors(TestBoard.java:521)
    TestBoard.test5a(TestBoard.java:1453)
    TestBoard.main(TestBoard.java:1721)

  * puzzle23.txt

    java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 3

    Board.swap(Board.java:143)
    Board.neighbors(Board.java:111)
    TestBoard.checkNeighbors(TestBoard.java:547)
    TestBoard.checkNeighbors(TestBoard.java:521)
    TestBoard.test5a(TestBoard.java:1454)
    TestBoard.main(TestBoard.java:1721)

  * puzzle2x2-unsolvable1.txt

    java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 2

    Board.swap(Board.java:143)
    Board.neighbors(Board.java:111)
    TestBoard.checkNeighbors(TestBoard.java:547)
    TestBoard.checkNeighbors(TestBoard.java:521)
    TestBoard.test5a(TestBoard.java:1455)
    TestBoard.main(TestBoard.java:1721)

==> FAILED

Test 5b: check neighbors() with random n-by-n boards
  * 2-by-2

    java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 2

    Board.swap(Board.java:143)
    Board.neighbors(Board.java:111)
    TestBoard.checkNeighbors(TestBoard.java:547)
    TestBoard.checkNeighbors(TestBoard.java:529)
    TestBoard.test5b(TestBoard.java:1462)
    TestBoard.main(TestBoard.java:1722)

    - failed on trial 2 of 1000

  * 3-by-3

    java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 3

    Board.swap(Board.java:143)
    Board.neighbors(Board.java:111)
    TestBoard.checkNeighbors(TestBoard.java:547)
    TestBoard.checkNeighbors(TestBoard.java:529)
    TestBoard.test5b(TestBoard.java:1463)
    TestBoard.main(TestBoard.java:1722)

    - failed on trial 1 of 1000

  * 4-by-4

    java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 4

    Board.swap(Board.java:143)
    Board.neighbors(Board.java:111)
    TestBoard.checkNeighbors(TestBoard.java:547)
    TestBoard.checkNeighbors(TestBoard.java:529)
    TestBoard.test5b(TestBoard.java:1464)
    TestBoard.main(TestBoard.java:1722)

    - failed on trial 1 of 1000

  * 5-by-5

    java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 5

    Board.swap(Board.java:143)
    Board.neighbors(Board.java:111)
    TestBoard.checkNeighbors(TestBoard.java:547)
    TestBoard.checkNeighbors(TestBoard.java:529)
    TestBoard.test5b(TestBoard.java:1465)
    TestBoard.main(TestBoard.java:1722)

    - failed on trial 1 of 1000

  * 9-by-9

    java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 9

    Board.swap(Board.java:143)
    Board.neighbors(Board.java:111)
    TestBoard.checkNeighbors(TestBoard.java:547)
    TestBoard.checkNeighbors(TestBoard.java:529)
    TestBoard.test5b(TestBoard.java:1466)
    TestBoard.main(TestBoard.java:1722)

    - failed on trial 1 of 1000

  * 10-by-10

    java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 10

    Board.swap(Board.java:143)
    Board.neighbors(Board.java:111)
    TestBoard.checkNeighbors(TestBoard.java:547)
    TestBoard.checkNeighbors(TestBoard.java:529)
    TestBoard.test5b(TestBoard.java:1467)
    TestBoard.main(TestBoard.java:1722)

    - failed on trial 1 of 1000

  * 127-by-127

    java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 127

    Board.swap(Board.java:143)
    Board.neighbors(Board.java:111)
    TestBoard.checkNeighbors(TestBoard.java:547)
    TestBoard.checkNeighbors(TestBoard.java:529)
    TestBoard.test5b(TestBoard.java:1468)
    TestBoard.main(TestBoard.java:1722)

    - failed on trial 1 of 10

==> FAILED

Test 6a: check neighbors() of neighbors() with file inputs
  * puzzle04.txt

    java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 3

    Board.swap(Board.java:143)
    Board.neighbors(Board.java:111)
    TestBoard.checkNeighborsOfNeighbors(TestBoard.java:624)
    TestBoard.checkNeighborsOfNeighbors(TestBoard.java:599)
    TestBoard.test6a(TestBoard.java:1476)
    TestBoard.main(TestBoard.java:1723)

  * puzzle00.txt

    java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 10

    Board.swap(Board.java:143)
    Board.neighbors(Board.java:111)
    TestBoard.checkNeighborsOfNeighbors(TestBoard.java:626)
    TestBoard.checkNeighborsOfNeighbors(TestBoard.java:599)
    TestBoard.test6a(TestBoard.java:1477)
    TestBoard.main(TestBoard.java:1723)

  * puzzle06.txt

    java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 4

    Board.swap(Board.java:143)
    Board.neighbors(Board.java:111)
    TestBoard.checkNeighborsOfNeighbors(TestBoard.java:624)
    TestBoard.checkNeighborsOfNeighbors(TestBoard.java:599)
    TestBoard.test6a(TestBoard.java:1478)
    TestBoard.main(TestBoard.java:1723)

  * puzzle09.txt

    java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 4

    Board.swap(Board.java:143)
    Board.neighbors(Board.java:111)
    TestBoard.checkNeighborsOfNeighbors(TestBoard.java:624)
    TestBoard.checkNeighborsOfNeighbors(TestBoard.java:599)
    TestBoard.test6a(TestBoard.java:1479)
    TestBoard.main(TestBoard.java:1723)

  * puzzle23.txt

    java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 3

    Board.swap(Board.java:143)
    Board.neighbors(Board.java:111)
    TestBoard.checkNeighborsOfNeighbors(TestBoard.java:624)
    TestBoard.checkNeighborsOfNeighbors(TestBoard.java:599)
    TestBoard.test6a(TestBoard.java:1480)
    TestBoard.main(TestBoard.java:1723)

  * puzzle2x2-unsolvable1.txt

    java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 2

    Board.swap(Board.java:143)
    Board.neighbors(Board.java:111)
    TestBoard.checkNeighborsOfNeighbors(TestBoard.java:624)
    TestBoard.checkNeighborsOfNeighbors(TestBoard.java:599)
    TestBoard.test6a(TestBoard.java:1481)
    TestBoard.main(TestBoard.java:1723)

==> FAILED

Test 6b: check neighbors() of neighbors() with random n-by-n boards
  * 2-by-2

    java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 2

    Board.swap(Board.java:143)
    Board.neighbors(Board.java:111)
    TestBoard.checkNeighborsOfNeighbors(TestBoard.java:626)
    TestBoard.checkNeighborsOfNeighbors(TestBoard.java:607)
    TestBoard.test6b(TestBoard.java:1489)
    TestBoard.main(TestBoard.java:1724)

    - failed on trial 1 of 1000

  * 3-by-3

    java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 3

    Board.swap(Board.java:143)
    Board.neighbors(Board.java:111)
    TestBoard.checkNeighborsOfNeighbors(TestBoard.java:624)
    TestBoard.checkNeighborsOfNeighbors(TestBoard.java:607)
    TestBoard.test6b(TestBoard.java:1490)
    TestBoard.main(TestBoard.java:1724)

    - failed on trial 1 of 1000

  * 4-by-4

    java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 4

    Board.swap(Board.java:143)
    Board.neighbors(Board.java:111)
    TestBoard.checkNeighborsOfNeighbors(TestBoard.java:624)
    TestBoard.checkNeighborsOfNeighbors(TestBoard.java:607)
    TestBoard.test6b(TestBoard.java:1491)
    TestBoard.main(TestBoard.java:1724)

    - failed on trial 1 of 1000

  * 5-by-5

    java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 5

    Board.swap(Board.java:143)
    Board.neighbors(Board.java:111)
    TestBoard.checkNeighborsOfNeighbors(TestBoard.java:624)
    TestBoard.checkNeighborsOfNeighbors(TestBoard.java:607)
    TestBoard.test6b(TestBoard.java:1492)
    TestBoard.main(TestBoard.java:1724)

    - failed on trial 1 of 1000

  * 9-by-9

    java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 9

    Board.swap(Board.java:143)
    Board.neighbors(Board.java:111)
    TestBoard.checkNeighborsOfNeighbors(TestBoard.java:624)
    TestBoard.checkNeighborsOfNeighbors(TestBoard.java:607)
    TestBoard.test6b(TestBoard.java:1493)
    TestBoard.main(TestBoard.java:1724)

    - failed on trial 1 of 1000

  * 10-by-10

    java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 10

    Board.swap(Board.java:143)
    Board.neighbors(Board.java:111)
    TestBoard.checkNeighborsOfNeighbors(TestBoard.java:624)
    TestBoard.checkNeighborsOfNeighbors(TestBoard.java:607)
    TestBoard.test6b(TestBoard.java:1494)
    TestBoard.main(TestBoard.java:1724)

    - failed on trial 1 of 1000

==> FAILED

Test 7a: check twin() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 7b: check twin() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
==> passed

Test 8a: check isGoal() with file inputs
  * puzzle00.txt
  * puzzle04.txt
  * puzzle16.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
  * puzzle3x3-unsolvable1.txt
  * puzzle3x3-00.txt
  * puzzle4x4-00.txt
==> passed

Test 8b: check isGoal() on n-by-n goal boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 6-by-6
  * 100-by-100
==> passed

Test 9: check that two Board objects can be created at the same time
  * random 3-by-3 and 3-by-3 boards
  * random 4-by-4 and 4-by-4 boards
  * random 2-by-2 and 2-by-2 boards
  * random 3-by-3 and 4-by-4 boards
  * random 4-by-4 and 3-by-3 boards
==> passed

Test 10a: check equals()
  * reflexive
  * symmetric
  * transitive
  * argument is null
  * argument is of type String
  * argument is of type UncastableString
  * Board object stored in a variable of type Object
    - fails when argument to equals() is of type Object
    - student   board1.equals(board2) = false
    - reference board1.equals(board2) = true

    - fails when object that invokes equals() is of type Object
    - student   board2.equals(board1) = false
    - reference board2.equals(board1) = true

    - fails when invoking object and argument to equals() are both of type Object
    - student   board2.equals(board3) = false
    - reference board2.equals(board3) = true

    - Board board1
        3
         4  3  8 
         2  0  5 
         7  1  6 
    - Object board2
        3
         4  3  8 
         2  0  5 
         7  1  6 
    - Object board3
        3
         4  3  8 
         2  0  5 
         7  1  6 

==> FAILED

Test 10b: check correctness of equals() on random n-by-n boards
  * n = 2
    - failed on trial 2 of 100
    - student   board1.equals(board2) = false
    - reference board1.equals(board2) = true
    - board1
        2
         2  3 
         0  1 
    - board2
        2
         2  3 
         0  1 

  * n = 3
    - failed on trial 2 of 1000
    - student   board1.equals(board2) = false
    - reference board1.equals(board2) = true
    - board1
        3
         6  2  3 
         8  5  4 
         0  1  7 
    - board2
        3
         6  2  3 
         8  5  4 
         0  1  7 

  * n = 4
    - failed on trial 1 of 1000
    - student   board1.equals(board2) = false
    - reference board1.equals(board2) = true
    - board1
        4
        15 12  0  4 
         3  5 13  2 
         7  8  1  9 
        10 14  6 11 
    - board2
        4
        15 12  0  4 
         3  5 13  2 
         7  8  1  9 
        10 14  6 11 

  * 5 <= n < 10
    - failed on trial 3 of 1000
    - student   board1.equals(board2) = false
    - reference board1.equals(board2) = true
    - board1
        7
         4 36 34 14  6 19 30 
        13 20 21 11 33 29 38 
        35  2 26 16 47  8 40 
        46 39  1 17 44 28  0 
        25 32 42 22  3 43 41 
        48  9  5  7 23 45 31 
        37 27 10 12 24 15 18 
    - board2
        7
         4 36 34 14  6 19 30 
        13 20 21 11 33 29 38 
        35  2 26 16 47  8 40 
        46 39  1 17 44 28  0 
        25 32 42 22  3 43 41 
        48  9  5  7 23 45 31 
        37 27 10 12 24 15 18 

==> FAILED

Test 10c: check equals() when board sizes m and n are different
  * m = 4, n = 5
  * m = 2, n = 5
  * m = 5, n = 3
  * m = 2, n = 3
  * m = 3, n = 2
==> passed

Test 11: check that Board is immutable by changing argument array after
         construction and making sure Board does not mutate
==> passed

Test 12: check that Board is immutable by testing whether methods
         return the same value, regardless of order in which called
  * puzzle10.txt

    java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 9

    Board.swap(Board.java:143)
    Board.neighbors(Board.java:111)
    TestBoard.checkImmutableBoard(TestBoard.java:1293)
    TestBoard.checkImmutableBoard(TestBoard.java:1354)
    TestBoard.test12(TestBoard.java:1635)
    TestBoard.main(TestBoard.java:1734)

    - sequence of Board operations was:
         Board board = new Board(tiles)
         board.manhattan()   ==> 3796
         board.equals(other) ==> false
         board.isGoal()      ==> false
         board.neighbors()

  * puzzle20.txt

    java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 3

    Board.swap(Board.java:143)
    Board.neighbors(Board.java:111)
    TestBoard.checkImmutableBoard(TestBoard.java:1293)
    TestBoard.checkImmutableBoard(TestBoard.java:1354)
    TestBoard.test12(TestBoard.java:1636)
    TestBoard.main(TestBoard.java:1734)

    - sequence of Board operations was:
         Board board = new Board(tiles)
         board.neighbors()

  * puzzle30.txt
    - failed after 9 calls to random methods in Board
    - first call to twin() =
        3
         4  8  7 
         1  5  6 
         3  2  0 

    - last  call to twin() =
        3
         4  8  7 
         1  5  6 
         3  2  0 

    - twin1.equals(twin2) = false
    - twin2.equals(twin1) = false
    - sequence of Board operations was:
         Board board = new Board(tiles)
         board.twin()
         board.isGoal()      ==> false
         board.hamming()     ==> 6
         board.hamming()     ==> 6
         board.manhattan()   ==> 49
         board.isGoal()      ==> false
         board.toString()
         board.isGoal()      ==> false
         board.twin()

    - failed after 13 calls to random methods in Board
    - neighbor 1 in first call to neighbors() =
        3
         8  4  7 
         1  5  6 
         3  0  2 

    - neighbor 1 in last  call to neighbors() =
        3
         8  4  7 
         1  5  6 
         3  0  2 

    - board1.equals(board2) = false
    - board2.equals(board1) = false

  * 2-by-2

    java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 2

    Board.swap(Board.java:143)
    Board.neighbors(Board.java:111)
    TestBoard.checkImmutableBoard(TestBoard.java:1293)
    TestBoard.checkImmutableBoard(TestBoard.java:1339)
    TestBoard.test12(TestBoard.java:1638)
    TestBoard.main(TestBoard.java:1734)

    - sequence of Board operations was:
         Board board = new Board(tiles)
         board.toString()
         board.twin()
         board.manhattan()   ==> 9
         board.toString()
         board.equals(other) ==> false
         board.hamming()     ==> 3
         board.hamming()     ==> 3
         board.toString()
         board.isGoal()      ==> false
         board.neighbors()

    - failed on trial 1 of 100

  * 3-by-3

    java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 3

    Board.swap(Board.java:143)
    Board.neighbors(Board.java:111)
    TestBoard.checkImmutableBoard(TestBoard.java:1293)
    TestBoard.checkImmutableBoard(TestBoard.java:1339)
    TestBoard.test12(TestBoard.java:1639)
    TestBoard.main(TestBoard.java:1734)

    - sequence of Board operations was:
         Board board = new Board(tiles)
         board.neighbors()

    - failed on trial 1 of 100

  * 4-by-4

    java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 4

    Board.swap(Board.java:143)
    Board.neighbors(Board.java:111)
    TestBoard.checkImmutableBoard(TestBoard.java:1293)
    TestBoard.checkImmutableBoard(TestBoard.java:1339)
    TestBoard.test12(TestBoard.java:1640)
    TestBoard.main(TestBoard.java:1734)

    - sequence of Board operations was:
         Board board = new Board(tiles)
         board.manhattan()   ==> 158
         board.toString()
         board.manhattan()   ==> 158
         board.equals(other) ==> false
         board.neighbors()

    - failed on trial 1 of 100

==> FAILED

Test 13: check dimension() on a board that is kth neighbor of a board
  * 0th neighbor of puzzle27.txt
  * 1st neighbor of puzzle27.txt

    java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 3

    Board.swap(Board.java:143)
    Board.neighbors(Board.java:111)
    TestBoard.checkDimensionWithNeighbors(TestBoard.java:282)
    TestBoard.checkDimensionWithNeighbors(TestBoard.java:274)
    TestBoard.test13(TestBoard.java:1648)
    TestBoard.main(TestBoard.java:1735)

  * 2nd neighbor of puzzle27.txt

    java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 3

    Board.swap(Board.java:143)
    Board.neighbors(Board.java:111)
    TestBoard.checkDimensionWithNeighbors(TestBoard.java:282)
    TestBoard.checkDimensionWithNeighbors(TestBoard.java:274)
    TestBoard.test13(TestBoard.java:1649)
    TestBoard.main(TestBoard.java:1735)

  * 13th neighbor of puzzle27.txt

    java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 3

    Board.swap(Board.java:143)
    Board.neighbors(Board.java:111)
    TestBoard.checkDimensionWithNeighbors(TestBoard.java:282)
    TestBoard.checkDimensionWithNeighbors(TestBoard.java:274)
    TestBoard.test13(TestBoard.java:1650)
    TestBoard.main(TestBoard.java:1735)

  * 13th neighbor of puzzle00.txt

    java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 10

    Board.swap(Board.java:143)
    Board.neighbors(Board.java:111)
    TestBoard.checkDimensionWithNeighbors(TestBoard.java:282)
    TestBoard.checkDimensionWithNeighbors(TestBoard.java:274)
    TestBoard.test13(TestBoard.java:1651)
    TestBoard.main(TestBoard.java:1735)

  * 13th neighbor of puzzle2x2-unsolvable1.txt

    java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 2

    Board.swap(Board.java:143)
    Board.neighbors(Board.java:111)
    TestBoard.checkDimensionWithNeighbors(TestBoard.java:282)
    TestBoard.checkDimensionWithNeighbors(TestBoard.java:274)
    TestBoard.test13(TestBoard.java:1652)
    TestBoard.main(TestBoard.java:1735)

==> FAILED

Test 14: check hamming() on a board that is kth neighbor of a board
  * 0th neighbor of puzzle27.txt
  * 1st neighbor of puzzle27.txt

    java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 3

    Board.swap(Board.java:143)
    Board.neighbors(Board.java:111)
    TestBoard.checkHammingWithNeighbors(TestBoard.java:194)
    TestBoard.checkHammingWithNeighbors(TestBoard.java:186)
    TestBoard.test14(TestBoard.java:1660)
    TestBoard.main(TestBoard.java:1736)

  * 2nd neighbor of puzzle27.txt

    java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 3

    Board.swap(Board.java:143)
    Board.neighbors(Board.java:111)
    TestBoard.checkHammingWithNeighbors(TestBoard.java:194)
    TestBoard.checkHammingWithNeighbors(TestBoard.java:186)
    TestBoard.test14(TestBoard.java:1661)
    TestBoard.main(TestBoard.java:1736)

  * 13th neighbor of puzzle27.txt

    java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 3

    Board.swap(Board.java:143)
    Board.neighbors(Board.java:111)
    TestBoard.checkHammingWithNeighbors(TestBoard.java:194)
    TestBoard.checkHammingWithNeighbors(TestBoard.java:186)
    TestBoard.test14(TestBoard.java:1662)
    TestBoard.main(TestBoard.java:1736)

  * 13th neighbor of puzzle00.txt

    java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 10

    Board.swap(Board.java:143)
    Board.neighbors(Board.java:111)
    TestBoard.checkHammingWithNeighbors(TestBoard.java:194)
    TestBoard.checkHammingWithNeighbors(TestBoard.java:186)
    TestBoard.test14(TestBoard.java:1663)
    TestBoard.main(TestBoard.java:1736)

  * 13th neighbor of puzzle2x2-unsolvable1.txt

    java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 2

    Board.swap(Board.java:143)
    Board.neighbors(Board.java:111)
    TestBoard.checkHammingWithNeighbors(TestBoard.java:194)
    TestBoard.checkHammingWithNeighbors(TestBoard.java:186)
    TestBoard.test14(TestBoard.java:1664)
    TestBoard.main(TestBoard.java:1736)

==> FAILED

Test 15: check manhattan() on a board that is a kth neighbor of a board
  * 0th neighbor of puzzle27.txt
    - student   manhattan() = 50
    - reference manhattan() = 17
        3
         5  8  7 
         1  4  6 
         3  0  2 


  * 1st neighbor of puzzle27.txt

    java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 3

    Board.swap(Board.java:143)
    Board.neighbors(Board.java:111)
    TestBoard.checkManhattanWithNeighbors(TestBoard.java:369)
    TestBoard.checkManhattanWithNeighbors(TestBoard.java:359)
    TestBoard.test15(TestBoard.java:1672)
    TestBoard.main(TestBoard.java:1737)

  * 2nd neighbor of puzzle27.txt

    java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 3

    Board.swap(Board.java:143)
    Board.neighbors(Board.java:111)
    TestBoard.checkManhattanWithNeighbors(TestBoard.java:369)
    TestBoard.checkManhattanWithNeighbors(TestBoard.java:359)
    TestBoard.test15(TestBoard.java:1673)
    TestBoard.main(TestBoard.java:1737)

  * 13th neighbor of puzzle27.txt

    java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 3

    Board.swap(Board.java:143)
    Board.neighbors(Board.java:111)
    TestBoard.checkManhattanWithNeighbors(TestBoard.java:369)
    TestBoard.checkManhattanWithNeighbors(TestBoard.java:359)
    TestBoard.test15(TestBoard.java:1674)
    TestBoard.main(TestBoard.java:1737)

  * 13th neighbor of puzzle00.txt

    java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 10

    Board.swap(Board.java:143)
    Board.neighbors(Board.java:111)
    TestBoard.checkManhattanWithNeighbors(TestBoard.java:369)
    TestBoard.checkManhattanWithNeighbors(TestBoard.java:359)
    TestBoard.test15(TestBoard.java:1675)
    TestBoard.main(TestBoard.java:1737)

  * 13th neighbor of puzzle2x2-unsolvable1.txt

    java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 2

    Board.swap(Board.java:143)
    Board.neighbors(Board.java:111)
    TestBoard.checkManhattanWithNeighbors(TestBoard.java:369)
    TestBoard.checkManhattanWithNeighbors(TestBoard.java:359)
    TestBoard.test15(TestBoard.java:1676)
    TestBoard.main(TestBoard.java:1737)

==> FAILED

Test 16: check hamming() on a board that is a kth twin of a board
  * 0th twin of puzzle27.txt
  * 1st twin of puzzle27.txt
  * 2nd twin of puzzle27.txt
  * 13th twin of puzzle27.txt
  * 13th twin of puzzle00.txt
  * 13th twin of puzzle2x2-unsolvable1.txt
==> passed

Test 17: check manhattan() on a board that is a kth twin of a board
  * 0th twin of puzzle27.txt
    - student   manhattan() = 50
    - reference manhattan() = 17
        3
         5  8  7 
         1  4  6 
         3  0  2 


  * 1st twin of puzzle27.txt
    - student   manhattan() = 50
    - reference manhattan() = 17
        3
         8  5  7 
         1  4  6 
         3  0  2 


  * 2nd twin of puzzle27.txt
    - student   manhattan() = 50
    - reference manhattan() = 17
        3
         5  8  7 
         1  4  6 
         3  0  2 


  * 13th twin of puzzle27.txt
    - student   manhattan() = 50
    - reference manhattan() = 17
        3
         8  5  7 
         1  4  6 
         3  0  2 


  * 13th twin of puzzle00.txt
    - student   manhattan() = 5730
    - reference manhattan() = 2
        10
         2  1  3  4  5  6  7  8  9 10 
        11 12 13 14 15 16 17 18 19 20 
        21 22 23 24 25 26 27 28 29 30 
        31 32 33 34 35 36 37 38 39 40 
        41 42 43 44 45 46 47 48 49 50 
        51 52 53 54 55 56 57 58 59 60 
        61 62 63 64 65 66 67 68 69 70 
        71 72 73 74 75 76 77 78 79 80 
        81 82 83 84 85 86 87 88 89 90 
        91 92 93 94 95 96 97 98 99  0 


  * 13th twin of puzzle2x2-unsolvable1.txt
    - student   manhattan() = 9
    - reference manhattan() = 1
        2
         1  0 
         3  2 


==> FAILED


Total: 13/26 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of Board
*-----------------------------------------------------------
Running 10 total tests.

Memory usage of an n-by-n board
[ must be at most 4n^2 + 32n + 64 bytes ]


              n       student (bytes)    reference (bytes)
----------------------------------------------------------
=> passed     2           136                  128
=> passed     3           200                  192
=> passed     4           248                  240
=> passed     8           568                  560
=> passed    12          1016                 1008
=> passed    16          1592                 1584
=> passed    20          2296                 2288
=> passed    37          6864                 6856
=> passed    72         23096                23088
=> passed   120         61496                61488
==> 10/10 tests passed

Total: 10/10 tests passed!

Student   memory = 4.00 n^2 + 32.00 n + 56.00   (R^2 = 1.000)
Reference memory = 4.00 n^2 + 32.00 n + 48.00   (R^2 = 1.000)


================================================================



********************************************************************************
*  TESTING CORRECTNESS (substituting reference Board)
********************************************************************************

Testing correctness of Solver
*-----------------------------------------------------------
Running 25 total tests.

Test 1a: check moves() with file inputs
  * puzzle00.txt
  * puzzle01.txt
  * puzzle02.txt
  * puzzle03.txt
  * puzzle04.txt
  * puzzle05.txt
  * puzzle06.txt
  * puzzle07.txt
  * puzzle08.txt
  * puzzle09.txt
  * puzzle10.txt
  * puzzle11.txt
  * puzzle12.txt
  * puzzle13.txt
==> passed

Test 1b: check solution() with file inputs
  * puzzle00.txt
  * puzzle01.txt
  * puzzle02.txt
  * puzzle03.txt
  * puzzle04.txt
  * puzzle05.txt
  * puzzle06.txt
  * puzzle07.txt
  * puzzle08.txt
  * puzzle09.txt
  * puzzle10.txt
  * puzzle11.txt
  * puzzle12.txt
  * puzzle13.txt
==> passed

Test 2a: check moves() with more file inputs
  * puzzle14.txt
  * puzzle15.txt
  * puzzle16.txt
  * puzzle17.txt
  * puzzle18.txt
  * puzzle19.txt
  * puzzle20.txt
  * puzzle21.txt
  * puzzle22.txt
  * puzzle23.txt
  * puzzle24.txt
  * puzzle25.txt
  * puzzle26.txt
  * puzzle27.txt
  * puzzle28.txt
  * puzzle29.txt
  * puzzle30.txt
  * puzzle31.txt
==> passed

Test 2b: check solution() with more file inputs
  * puzzle14.txt
  * puzzle15.txt
  * puzzle16.txt
  * puzzle17.txt
  * puzzle18.txt
  * puzzle19.txt
  * puzzle20.txt
  * puzzle21.txt
  * puzzle22.txt
  * puzzle23.txt
  * puzzle24.txt
  * puzzle25.txt
  * puzzle26.txt
  * puzzle27.txt
  * puzzle28.txt
  * puzzle29.txt
  * puzzle30.txt
  * puzzle31.txt
==> passed

Test 3a: check moves() with random solvable n-by-n boards
  * 1000 random 3-by-3 boards that are exactly 1 move from goal
  * 1000 random 3-by-3 boards that are exactly 2 moves from goal
  * 1000 random 3-by-3 boards that are exactly 3 moves from goal
  * 1000 random 3-by-3 boards that are exactly 4 moves from goal
  * 1000 random 3-by-3 boards that are exactly 5 moves from goal
  * 1000 random 3-by-3 boards that are exactly 6 moves from goal
  * 1000 random 3-by-3 boards that are exactly 7 moves from goal
  * 1000 random 3-by-3 boards that are exactly 8 moves from goal
  * 1000 random 3-by-3 boards that are exactly 9 moves from goal
  * 1000 random 3-by-3 boards that are exactly 10 moves from goal
  * 1000 random 3-by-3 boards that are exactly 11 moves from goal
  * 1000 random 3-by-3 boards that are exactly 12 moves from goal
==> passed

Test 3b: check solution() with random solvable n-by-n boards
  * 1000 random 3-by-3 boards that are exactly 1 move from goal
  * 1000 random 3-by-3 boards that are exactly 2 moves from goal
  * 1000 random 3-by-3 boards that are exactly 3 moves from goal
  * 1000 random 3-by-3 boards that are exactly 4 moves from goal
  * 1000 random 3-by-3 boards that are exactly 5 moves from goal
  * 1000 random 3-by-3 boards that are exactly 6 moves from goal
  * 1000 random 3-by-3 boards that are exactly 7 moves from goal
  * 1000 random 3-by-3 boards that are exactly 8 moves from goal
  * 1000 random 3-by-3 boards that are exactly 9 moves from goal
  * 1000 random 3-by-3 boards that are exactly 10 moves from goal
  * 1000 random 3-by-3 boards that are exactly 11 moves from goal
  * 1000 random 3-by-3 boards that are exactly 12 moves from goal
==> passed

Test 4: create two Solver objects at the same time
  * puzzle04.txt and puzzle04.txt
  * puzzle00.txt and puzzle04.txt
  * puzzle04.txt and puzzle00.txt
==> passed

Test 5a: call isSolvable() with file inputs
  * puzzle01.txt
  * puzzle03.txt
  * puzzle04.txt
  * puzzle17.txt
  * puzzle3x3-unsolvable1.txt
  * puzzle3x3-unsolvable2.txt
  * puzzle4x4-unsolvable.txt
==> passed

Test 5b: call isSolvable() on random n-by-n boards
  * 100 random 2-by-2 boards
==> passed

Test 6: check moves() on unsolvable puzzles
  * puzzle2x2-unsolvable1.txt
  * puzzle2x2-unsolvable2.txt
  * puzzle3x3-unsolvable1.txt
  * puzzle3x3-unsolvable2.txt
  * puzzle4x4-unsolvable.txt
==> passed

Test 7: check solution() on unsolvable puzzles
  * puzzle2x2-unsolvable1.txt
  * puzzle2x2-unsolvable2.txt
  * puzzle3x3-unsolvable1.txt
  * puzzle3x3-unsolvable2.txt
  * puzzle4x4-unsolvable.txt
==> passed

Test 8a: check that Solver is immutable by testing whether methods
         return the same value, regardless of order in which called
  * puzzle3x3-00.txt
  * puzzle3x3-01.txt
  * puzzle3x3-05.txt
  * puzzle3x3-10.txt
  * random 2-by-2 solvable boards
==> passed

Test 8b: check that Solver is immutable by testing whether methods
         return the same value, regardless of order in which called
  * puzzle3x3-unsolvable1.txt
  * puzzle3x3-unsolvable2.txt
  * puzzle4x4-unsolvable.txt
  * random 2-by-2 unsolvable boards
==> passed

Test 9a: check that equals() method in Board is called
  * puzzle04.txt
  * puzzle05.txt
  * puzzle10.txt
==> passed

Test 9b: check that equals() method in Board is called only
         with an argument of type Board
  * puzzle00.txt
  * puzzle04.txt
  * puzzle05.txt
  * puzzle10.txt
==> passed

Test 9c: check that equals() method in Board is called only
         with a neighbor of a neighbor as an argument
  * puzzle00.txt
  * puzzle04.txt
  * puzzle05.txt
  * puzzle10.txt
  * puzzle27.txt
==> passed

Test 10: check that constructor throws exception if board is null
==> passed

Test 11a: check moves() with 2-by-2 file inputs
  * puzzle2x2-00.txt
  * puzzle2x2-01.txt
  * puzzle2x2-02.txt
  * puzzle2x2-03.txt
  * puzzle2x2-04.txt
  * puzzle2x2-05.txt
  * puzzle2x2-06.txt
==> passed

Test 11b: check solution() with 2-by-2 file inputs
  * puzzle2x2-00.txt
  * puzzle2x2-01.txt
  * puzzle2x2-02.txt
  * puzzle2x2-03.txt
  * puzzle2x2-04.txt
  * puzzle2x2-05.txt
  * puzzle2x2-06.txt
==> passed

Test 12a: check moves() with 3-by-3 file inputs
  * puzzle3x3-00.txt
  * puzzle3x3-01.txt
  * puzzle3x3-02.txt
  * puzzle3x3-03.txt
  * puzzle3x3-04.txt
  * puzzle3x3-05.txt
  * puzzle3x3-06.txt
  * puzzle3x3-07.txt
  * puzzle3x3-08.txt
  * puzzle3x3-09.txt
  * puzzle3x3-10.txt
  * puzzle3x3-11.txt
  * puzzle3x3-12.txt
  * puzzle3x3-13.txt
  * puzzle3x3-14.txt
  * puzzle3x3-15.txt
  * puzzle3x3-16.txt
  * puzzle3x3-17.txt
  * puzzle3x3-18.txt
  * puzzle3x3-19.txt
  * puzzle3x3-20.txt
  * puzzle3x3-21.txt
  * puzzle3x3-22.txt
  * puzzle3x3-23.txt
  * puzzle3x3-24.txt
  * puzzle3x3-25.txt
  * puzzle3x3-26.txt
  * puzzle3x3-27.txt
  * puzzle3x3-28.txt
  * puzzle3x3-29.txt
  * puzzle3x3-30.txt
==> passed

Test 12b: check solution() with 3-by-3 file inputs
  * puzzle3x3-00.txt
  * puzzle3x3-01.txt
  * puzzle3x3-02.txt
  * puzzle3x3-03.txt
  * puzzle3x3-04.txt
  * puzzle3x3-05.txt
  * puzzle3x3-06.txt
  * puzzle3x3-07.txt
  * puzzle3x3-08.txt
  * puzzle3x3-09.txt
  * puzzle3x3-10.txt
  * puzzle3x3-11.txt
  * puzzle3x3-12.txt
  * puzzle3x3-13.txt
  * puzzle3x3-14.txt
  * puzzle3x3-15.txt
  * puzzle3x3-16.txt
  * puzzle3x3-17.txt
  * puzzle3x3-18.txt
  * puzzle3x3-19.txt
  * puzzle3x3-20.txt
  * puzzle3x3-21.txt
  * puzzle3x3-22.txt
  * puzzle3x3-23.txt
  * puzzle3x3-24.txt
  * puzzle3x3-25.txt
  * puzzle3x3-26.txt
  * puzzle3x3-27.txt
  * puzzle3x3-28.txt
  * puzzle3x3-29.txt
  * puzzle3x3-30.txt
==> passed

Test 13a: check moves() with 4-by-4 file inputs
  * puzzle4x4-00.txt
  * puzzle4x4-01.txt
  * puzzle4x4-02.txt
  * puzzle4x4-03.txt
  * puzzle4x4-04.txt
  * puzzle4x4-05.txt
  * puzzle4x4-06.txt
  * puzzle4x4-07.txt
  * puzzle4x4-08.txt
  * puzzle4x4-09.txt
  * puzzle4x4-10.txt
  * puzzle4x4-11.txt
  * puzzle4x4-12.txt
  * puzzle4x4-13.txt
  * puzzle4x4-14.txt
  * puzzle4x4-15.txt
  * puzzle4x4-16.txt
  * puzzle4x4-17.txt
  * puzzle4x4-18.txt
  * puzzle4x4-19.txt
  * puzzle4x4-20.txt
  * puzzle4x4-21.txt
  * puzzle4x4-22.txt
  * puzzle4x4-23.txt
  * puzzle4x4-24.txt
  * puzzle4x4-25.txt
  * puzzle4x4-26.txt
  * puzzle4x4-27.txt
  * puzzle4x4-28.txt
  * puzzle4x4-29.txt
  * puzzle4x4-30.txt
==> passed

Test 13b: check solution() with 4-by-4 file inputs
  * puzzle4x4-00.txt
  * puzzle4x4-01.txt
  * puzzle4x4-02.txt
  * puzzle4x4-03.txt
  * puzzle4x4-04.txt
  * puzzle4x4-05.txt
  * puzzle4x4-06.txt
  * puzzle4x4-07.txt
  * puzzle4x4-08.txt
  * puzzle4x4-09.txt
  * puzzle4x4-10.txt
  * puzzle4x4-11.txt
  * puzzle4x4-12.txt
  * puzzle4x4-13.txt
  * puzzle4x4-14.txt
  * puzzle4x4-15.txt
  * puzzle4x4-16.txt
  * puzzle4x4-17.txt
  * puzzle4x4-18.txt
  * puzzle4x4-19.txt
  * puzzle4x4-20.txt
  * puzzle4x4-21.txt
  * puzzle4x4-22.txt
  * puzzle4x4-23.txt
  * puzzle4x4-24.txt
  * puzzle4x4-25.txt
  * puzzle4x4-26.txt
  * puzzle4x4-27.txt
  * puzzle4x4-28.txt
  * puzzle4x4-29.txt
  * puzzle4x4-30.txt
==> passed

Test 14a: check moves() with random solvable n-by-n boards
  * 100 random 2-by-2 boards that are <= 6 moves from goal
  * 200 random 3-by-3 boards that are <= 20 moves from goal
  * 200 random 4-by-4 boards that are <= 20 moves from goal
  * 200 random 5-by-5 boards that are <= 20 moves from goal
==> passed

Test 14b: check solution() with random solvable n-by-n boards
  * 100 random 2-by-2 boards that are <= 6 moves from goal
  * 200 random 3-by-3 boards that are <= 20 moves from goal
  * 200 random 4-by-4 boards that are <= 20 moves from goal
  * 200 random 5-by-5 boards that are <= 20 moves from goal
==> passed


Total: 25/25 tests passed!


================================================================
********************************************************************************
*  MEMORY (substituting reference Board)
********************************************************************************

Analyzing memory of Solver
*-----------------------------------------------------------
Running 12 total tests.

Maximum allowed time per puzzle is 5.0 seconds.
Maximum allowed memory per puzzle = 200000000 bytes.

Test 1: Measure memory of Solver.

               filename   moves   memory
---------------------------------------------
=> passed  puzzle10.txt      10     4880         
=> passed  puzzle15.txt      15     5928         
=> passed  puzzle20.txt      20     3232         
=> passed  puzzle25.txt      25     3992         
=> passed  puzzle30.txt      30     4752         
=> passed  puzzle35.txt      35     6376         
==> 6/6 tests passed



Test 2: Measure memory of MinPQ.

                              deep              max           ending
               filename     memory             size             size
--------------------------------------------------------------------
=> passed  puzzle10.txt      28880               33               32         
=> passed  puzzle15.txt      36416               51               50         
=> passed  puzzle20.txt     230168              586              585         
=> passed  puzzle25.txt    1637576             4213             4212         
=> passed  puzzle30.txt    6816704            17037            17036         
=> passed  puzzle35.txt   97160608           271121           271120         
==> 6/6 tests passed


Total: 12/12 tests passed!


================================================================



********************************************************************************
*  TIMING (substituting reference Board)
********************************************************************************

Timing Solver
*-----------------------------------------------------------
Running 125 total tests.

Maximum allowed time per puzzle is 5.0 seconds.

Test 1: Measure CPU time and check correctness

               filename   moves    n  seconds
---------------------------------------------
=> passed  puzzle20.txt      20    3     0.01 
=> passed  puzzle22.txt      22    3     0.00 
=> passed  puzzle21.txt      21    3     0.00 
=> passed  puzzle23.txt      23    3     0.00 
=> passed  puzzle24.txt      24    3     0.00 
=> passed  puzzle25.txt      25    3     0.01 
=> passed  puzzle27.txt      27    3     0.01 
=> passed  puzzle29.txt      29    3     0.01 
=> passed  puzzle26.txt      26    3     0.01 
=> passed  puzzle28.txt      28    3     0.02 
=> passed  puzzle30.txt      30    3     0.02 
=> passed  puzzle31.txt      31    3     0.02 
=> passed  puzzle39.txt      39    4     0.03 
=> passed  puzzle41.txt      41    5     0.06 
=> passed  puzzle34.txt      34    4     0.07 
=> passed  puzzle37.txt      37    4     0.07 
=> passed  puzzle44.txt      44    5     0.15 
=> passed  puzzle32.txt      32    4     0.24 
=> passed  puzzle35.txt      35    4     0.25 
=> passed  puzzle33.txt      33    4     0.30 
=> passed  puzzle43.txt      43    4     0.48 
=> passed  puzzle46.txt      46    4     0.49 
=> passed  puzzle40.txt      40    4     0.52 
=> passed  puzzle36.txt      36    4     1.02 
=> passed  puzzle45.txt      45    4     1.13 
==> 25/25 tests passed



Test 2: Count MinPQ operations

               filename   insert()         delMin()
---------------------------------------------------
=> passed  puzzle20.txt       1437              852         
=> passed  puzzle22.txt       3479             2070         
=> passed  puzzle21.txt       3539             2080         
=> passed  puzzle23.txt       5297             3148         
=> passed  puzzle24.txt       5425             3258         
=> passed  puzzle25.txt      10314             6102         
=> passed  puzzle27.txt      11207             6740         
=> passed  puzzle29.txt      11635             7076         
=> passed  puzzle26.txt      11892             7098         
=> passed  puzzle28.txt      26972            16230         
=> passed  puzzle30.txt      43092            26056         
=> passed  puzzle31.txt      46005            27804         
=> passed  puzzle39.txt      71415            35044         
=> passed  puzzle41.txt     116489            50008         
=> passed  puzzle34.txt     151671            73158         
=> passed  puzzle37.txt     166809            80084         
=> passed  puzzle44.txt     275659           123164         
=> passed  puzzle32.txt     521594           249494         
=> passed  puzzle35.txt     528416           257296         
=> passed  puzzle33.txt     622350           298882         
=> passed  puzzle43.txt    1056803           508832         
=> passed  puzzle46.txt    1032318           516740         
=> passed  puzzle40.txt    1108441           541466         
=> passed  puzzle36.txt    2086329          1011484         
=> passed  puzzle45.txt    2418077          1189752         
==> 25/25 tests passed



Test 3: Count Board operations (that should not get called)

               filename    hamming()   toString()
-------------------------------------------------
=> passed  puzzle20.txt            0            0         
=> passed  puzzle22.txt            0            0         
=> passed  puzzle21.txt            0            0         
=> passed  puzzle23.txt            0            0         
=> passed  puzzle24.txt            0            0         
=> passed  puzzle25.txt            0            0         
=> passed  puzzle27.txt            0            0         
=> passed  puzzle29.txt            0            0         
=> passed  puzzle26.txt            0            0         
=> passed  puzzle28.txt            0            0         
=> passed  puzzle30.txt            0            0         
=> passed  puzzle31.txt            0            0         
=> passed  puzzle39.txt            0            0         
=> passed  puzzle41.txt            0            0         
=> passed  puzzle34.txt            0            0         
=> passed  puzzle37.txt            0            0         
=> passed  puzzle44.txt            0            0         
=> passed  puzzle32.txt            0            0         
=> passed  puzzle35.txt            0            0         
=> passed  puzzle33.txt            0            0         
=> passed  puzzle43.txt            0            0         
=> passed  puzzle46.txt            0            0         
=> passed  puzzle40.txt            0            0         
=> passed  puzzle36.txt            0            0         
=> passed  puzzle45.txt            0            0         
==> 25/25 tests passed



Test 4a: Count Board operations (that should get called)

               filename    Board()            equals()         manhattan()
--------------------------------------------------------------------------
=> passed  puzzle20.txt       2289                2279                2292         
=> passed  puzzle22.txt       5549                5543                5552         
=> passed  puzzle21.txt       5619                5611                5622         
=> passed  puzzle23.txt       8445                8437                8448         
=> passed  puzzle24.txt       8683                8673                8686         
=> passed  puzzle25.txt      16416               16408               16419         
=> passed  puzzle27.txt      17947               17939               17950         
=> passed  puzzle29.txt      18711               18703               18714         
=> passed  puzzle26.txt      18990               18984               18993         
=> passed  puzzle28.txt      43202               43192               43205         
=> passed  puzzle30.txt      69148               69142               69151         
=> passed  puzzle31.txt      73809               73801               73812         
=> passed  puzzle39.txt     106459              106451              106462         
=> passed  puzzle41.txt     166497              166487              166500         
=> passed  puzzle34.txt     224829              224823              224832         
=> passed  puzzle37.txt     246893              246885              246896         
=> passed  puzzle44.txt     398823              398813              398826         
=> passed  puzzle32.txt     771088              771078              771091         
=> passed  puzzle35.txt     785712              785702              785715         
=> passed  puzzle33.txt     921232              921224              921235         
=> passed  puzzle43.txt    1565635             1565627             1565638         
=> passed  puzzle46.txt    1549058             1549050             1549061         
=> passed  puzzle40.txt    1649907             1649901             1649910         
=> passed  puzzle36.txt    3097813             3097803             3097816         
=> passed  puzzle45.txt    3607829             3607821             3607832         
==> 25/25 tests passed



Test 4b: count Board operations (that should get called),
         rejecting if doesn't adhere to stricter caching limits

               filename    Board()            equals()         manhattan()
--------------------------------------------------------------------------
=> passed  puzzle20.txt       2289                2279                2292         
=> passed  puzzle22.txt       5549                5543                5552         
=> passed  puzzle21.txt       5619                5611                5622         
=> passed  puzzle23.txt       8445                8437                8448         
=> passed  puzzle24.txt       8683                8673                8686         
=> passed  puzzle25.txt      16416               16408               16419         
=> passed  puzzle27.txt      17947               17939               17950         
=> passed  puzzle29.txt      18711               18703               18714         
=> passed  puzzle26.txt      18990               18984               18993         
=> passed  puzzle28.txt      43202               43192               43205         
=> passed  puzzle30.txt      69148               69142               69151         
=> passed  puzzle31.txt      73809               73801               73812         
=> passed  puzzle39.txt     106459              106451              106462         
=> passed  puzzle41.txt     166497              166487              166500         
=> passed  puzzle34.txt     224829              224823              224832         
=> passed  puzzle37.txt     246893              246885              246896         
=> passed  puzzle44.txt     398823              398813              398826         
=> passed  puzzle32.txt     771088              771078              771091         
=> passed  puzzle35.txt     785712              785702              785715         
=> passed  puzzle33.txt     921232              921224              921235         
=> passed  puzzle43.txt    1565635             1565627             1565638         
=> passed  puzzle46.txt    1549058             1549050             1549061         
=> passed  puzzle40.txt    1649907             1649901             1649910         
=> passed  puzzle36.txt    3097813             3097803             3097816         
=> passed  puzzle45.txt    3607829             3607821             3607832         
==> 25/25 tests passed


Total: 125/125 tests passed!


================================================================



